// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Тип столика
enum TableType {
  REGULAR   // обычный
  VIP       // вип
  FAMILY    // семейный
}

// Статус столика в реальном времени
enum TableStatus {
  AVAILABLE // доступен
  OCCUPIED  // занят
  RESERVED  // забронирован
  MAINTENANCE // обслуживание
}

// Статус бронирования
enum ReservationStatus {
  PENDING   // ожидает подтверждения
  CONFIRMED // подтверждена
  SEATED    // гости размещены
  COMPLETED // завершена
  CANCELLED // отменена
  NO_SHOW   // не явились
}

// Столики
model Table {
  id          String      @id @default(uuid()) @db.Uuid
  number      Int         @unique // номер столика
  minSeats    Int         // минимальное количество мест
  maxSeats    Int         // максимальное количество мест
  type        TableType   @default(REGULAR)
  status      TableStatus @default(AVAILABLE)
  location    String?     // расположение в зале (например, "у окна", "в центре")
  description String?     // дополнительное описание
  
  // Связи
  reservations Reservation[]
  analytics    Analytics[]
  walkInGuests WalkInGuest[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tables")
}

// Гости
model Guest {
  id          String @id @default(uuid()) @db.Uuid
  name        String
  phone       String @unique
  email       String?
  notes       String? // заметки о госте (предпочтения, аллергии и т.д.)
  
  // Связи
  reservations Reservation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("guests")
}

// Бронирования
model Reservation {
  id                String            @id @default(uuid()) @db.Uuid
  guestId           String            @db.Uuid
  tableId           String            @db.Uuid
  guestCount        Int               // количество человек
  reservationDate   DateTime          // дата и время бронирования
  duration          Int               @default(120) // продолжительность в минутах (по умолчанию 2 часа)
  status            ReservationStatus @default(PENDING)
  specialRequests   String?           // особые пожелания
  notes             String?           // внутренние заметки персонала
  
  // Связи
  guest Guest @relation(fields: [guestId], references: [id])
  table Table @relation(fields: [tableId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reservations")
}

// Аналитика (для отслеживания загруженности и трендов)
model Analytics {
  id            String   @id @default(uuid()) @db.Uuid
  tableId       String?  @db.Uuid // если привязано к конкретному столику
  date          DateTime
  totalGuests   Int      @default(0) // общее количество гостей за день
  totalRevenue  Float?   // общая выручка (если нужно)
  peakHourStart Int?     // час пик начало (0-23)
  peakHourEnd   Int?     // час пик конец (0-23)
  avgDuration   Int?     // среднее время обслуживания в минутах
  
  // Связи
  table Table? @relation(fields: [tableId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, tableId]) // уникальность по дате и столику
  @@map("analytics")
}

// Статус walk-in гостя
enum WalkInStatus {
  WAITING   // ожидает столик
  SEATED    // размещен за столиком
  LEFT      // ушел (не дождался или завершил обед)
}

// Walk-in гости (посетители без предварительного бронирования)
model WalkInGuest {
  id           String       @id @default(uuid()) @db.Uuid
  guestCount   Int          // количество человек в группе
  guestName    String?      // имя контактного лица (необязательно)
  phone        String?      // телефон для связи (необязательно)
  tableId      String?      @db.Uuid // столик, за которым размещены (если размещены)
  status       WalkInStatus @default(WAITING)
  estimatedWait Int?        // ожидаемое время ожидания в минутах
  seatedAt     DateTime?    // время размещения за столиком
  leftAt       DateTime?    // время ухода
  notes        String?      // заметки персонала
  
  // Связи
  table Table? @relation(fields: [tableId], references: [id])
  waitingQueue WaitingQueue[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("walk_in_guests")
}

// Очередь ожидания для walk-in гостей
model WaitingQueue {
  id           String   @id @default(uuid()) @db.Uuid
  walkInId     String   @db.Uuid
  guestCount   Int      // количество человек для приоритизации
  preferredTableType TableType? // предпочтительный тип столика
  estimatedWait Int?    // оценочное время ожидания в минутах
  priority     Int      @default(0) // приоритет в очереди (0 = обычный, больше = выше приоритет)
  
  // Связи  
  walkInGuest WalkInGuest @relation(fields: [walkInId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waiting_queue")
}
