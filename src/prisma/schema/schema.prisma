generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TableType {
  REGULAR  
  VIP       
  FAMILY    
}

enum TableStatus {
  AVAILABLE 
  OCCUPIED  
  RESERVED  
  MAINTENANCE 
}

enum ReservationStatus {
  PENDING  
  CONFIRMED 
  SEATED    
  COMPLETED 
  CANCELLED 
  NO_SHOW   
}

model Table {
  id          String      @id @default(uuid()) @db.Uuid
  number      Int         @unique
  minSeats    Int         
  maxSeats    Int         
  type        TableType   @default(REGULAR)
  status      TableStatus @default(AVAILABLE)
  location    String?     
  description String?     
  
  positionX   Float?      
  positionY   Float?      
  shape       String?     
  width       Float?      
  height      Float?      
  radius      Float?      
  
  reservations Reservation[]
  analytics    Analytics[]
  walkInGuests WalkInGuest[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tables")
}

model Guest {
  id          String @id @default(uuid()) @db.Uuid
  name        String
  phone       String @unique
  email       String?
  notes       String? 
  
  reservations Reservation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("guests")
}

model Reservation {
  id                String            @id @default(uuid()) @db.Uuid
  guestId           String            @db.Uuid
  tableId           String            @db.Uuid
  guestCount        Int               
  reservationDate   DateTime          
  duration          Int               @default(120) 
  status            ReservationStatus @default(PENDING)
  specialRequests   String?           
  notes             String?           
  
  guest Guest @relation(fields: [guestId], references: [id])
  table Table @relation(fields: [tableId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reservations")
}

model Analytics {
  id            String   @id @default(uuid()) @db.Uuid
  tableId       String?  @db.Uuid 
  date          DateTime
  totalGuests   Int      @default(0) 
  totalRevenue  Float?   
  peakHourStart Int?     
  peakHourEnd   Int?     
  avgDuration   Int?     
  
  table Table? @relation(fields: [tableId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, tableId]) 
  @@map("analytics")
}

enum WalkInStatus {
  WAITING  
  SEATED   
  LEFT     
}

model WalkInGuest {
  id           String       @id @default(uuid()) @db.Uuid
  guestCount   Int         
  guestName    String?     
  phone        String?     
  tableId      String?      @db.Uuid
  status       WalkInStatus @default(WAITING)
  estimatedWait Int?       
  seatedAt     DateTime?   
  leftAt       DateTime?   
  notes        String?     
  
  table Table? @relation(fields: [tableId], references: [id])
  waitingQueue WaitingQueue[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("walk_in_guests")
}

model WaitingQueue {
  id           String   @id @default(uuid()) @db.Uuid
  walkInId     String   @db.Uuid
  guestCount   Int     
  preferredTableType TableType?
  estimatedWait Int?   
  priority     Int      @default(0)
  
  walkInGuest WalkInGuest @relation(fields: [walkInId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waiting_queue")
}
